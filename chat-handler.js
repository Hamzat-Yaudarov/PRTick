const { Pool } = require('pg');

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

class ChatHandler {
    constructor(bot) {
        this.bot = bot;
        this.setupHandlers();
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç
        this.bot.on('new_chat_members', async (msg) => {
            const newMembers = msg.new_chat_members;
            const botId = await this.bot.getMe().then(me => me.id);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –±–æ—Ç–∞
            const botAdded = newMembers.some(member => member.id === botId);
            
            if (botAdded) {
                await this.handleBotAddedToChat(msg);
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤
                await this.checkNewMembersSubscriptions(msg, newMembers);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–∞—Ö
        this.bot.on('message', async (msg) => {
            if (msg.chat.type !== 'private' && !msg.new_chat_members) {
                await this.checkMessagePermission(msg);
            }
        });

        // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
        this.bot.onText(/\/add_sponsor (.+)/, async (msg, match) => {
            await this.addSponsor(msg, match[1]);
        });

        this.bot.onText(/\/remove_sponsor (.+)/, async (msg, match) => {
            await this.removeSponsor(msg, match[1]);
        });

        this.bot.onText(/\/sponsors/, async (msg) => {
            await this.listSponsors(msg);
        });
    }

    async handleBotAddedToChat(msg) {
        const chatId = msg.chat.id;
        const chatType = msg.chat.type;
        const chatTitle = msg.chat.title;
        const ownerId = msg.from.id;

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            await pool.query(
                'INSERT INTO chats (id, owner_id, chat_type, title) VALUES ($1, $2, $3, $4) ON CONFLICT (id) DO UPDATE SET owner_id = $2, title = $3',
                [chatId, ownerId, chatType, chatTitle]
            );

            const welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tick Bot!\n\n` +
                                 `–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã.\n\n` +
                                 `üìã –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n` +
                                 `/add_sponsor @channel - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞\n` +
                                 `/remove_sponsor @channel - —É–¥–∞–ª–∏—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞\n` +
                                 `/sponsors - —Å–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤\n\n` +
                                 `‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤!`;

            this.bot.sendMessage(chatId, welcomeMessage);
        } catch (error) {
            console.error('Error handling bot added to chat:', error);
        }
    }

    async checkNewMembersSubscriptions(msg, newMembers) {
        const chatId = msg.chat.id;
        
        for (const member of newMembers) {
            if (member.is_bot) continue;
            
            const hasRequiredSubscriptions = await this.checkUserSubscriptions(chatId, member.id);
            
            if (!hasRequiredSubscriptions) {
                const sponsors = await this.getChatSponsors(chatId);
                if (sponsors.length > 0) {
                    const sponsorsList = sponsors.map(s => `@${s.sponsor_username}`).join('\n');
                    
                    const message = `üëã ${member.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n` +
                                   `–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:\n\n` +
                                   `${sponsorsList}\n\n` +
                                   `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`;
                    
                    try {
                        await this.bot.sendMessage(chatId, message);
                    } catch (error) {
                        console.error('Error sending welcome message:', error);
                    }
                }
            }
        }
    }

    async checkMessagePermission(msg) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try {
            const chatMember = await this.bot.getChatMember(chatId, userId);
            if (['administrator', 'creator'].includes(chatMember.status)) {
                return; // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –≤—Å–µ–≥–¥–∞
            }
        } catch (error) {
            console.error('Error checking admin status:', error);
        }

        const hasRequiredSubscriptions = await this.checkUserSubscriptions(chatId, userId);
        
        if (!hasRequiredSubscriptions) {
            const sponsors = await this.getChatSponsors(chatId);
            if (sponsors.length > 0) {
                try {
                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await this.bot.deleteMessage(chatId, msg.message_id);
                    
                    const sponsorsList = sponsors.map(s => `@${s.sponsor_username}`).join('\n');
                    
                    const warningMessage = `‚ö†Ô∏è ${msg.from.first_name}, –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —á–∞—Ç–µ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:\n\n` +
                                         `${sponsorsList}\n\n` +
                                         `ÔøΩÔøΩ–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                    const warningMsg = await this.bot.sendMessage(chatId, warningMessage);
                    setTimeout(() => {
                        this.bot.deleteMessage(chatId, warningMsg.message_id).catch(() => {});
                    }, 10000);
                    
                } catch (error) {
                    console.error('Error deleting message or sending warning:', error);
                }
            }
        }
    }

    async checkUserSubscriptions(chatId, userId) {
        const sponsors = await this.getChatSponsors(chatId);
        
        if (sponsors.length === 0) {
            return true; // –ù–µ—Ç —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ - –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å
        }

        for (const sponsor of sponsors) {
            try {
                const chatMember = await this.bot.getChatMember(`@${sponsor.sponsor_username}`, userId);
                if (!['member', 'administrator', 'creator'].includes(chatMember.status)) {
                    return false;
                }
            } catch (error) {
                console.error(`Error checking subscription to ${sponsor.sponsor_username}:`, error);
                return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            }
        }
        
        return true;
    }

    async getChatSponsors(chatId) {
        try {
            const result = await pool.query(
                'SELECT * FROM chat_sponsors WHERE chat_id = $1 ORDER BY created_at',
                [chatId]
            );
            return result.rows;
        } catch (error) {
            console.error('Error getting chat sponsors:', error);
            return [];
        }
    }

    async addSponsor(msg, sponsorUsername) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try {
            const chatMember = await this.bot.getChatMember(chatId, userId);
            if (!['administrator', 'creator'].includes(chatMember.status)) {
                this.bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏.');
                return;
            }
        } catch (error) {
            console.error('Error checking admin rights:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.');
            return;
        }

        const cleanUsername = sponsorUsername.replace('@', '');
        
        try {
            await pool.query(
                'INSERT INTO chat_sponsors (chat_id, sponsor_username) VALUES ($1, $2)',
                [chatId, cleanUsername]
            );
            
            this.bot.sendMessage(chatId, `‚úÖ –°–ø–æ–Ω—Å–æ—Ä @${cleanUsername} –¥–æ–±–∞–≤–ª–µ–Ω!`);
        } catch (error) {
            if (error.code === '23505') { // Unique constraint violation
                this.bot.sendMessage(chatId, `‚ö†Ô∏è –°–ø–æ–Ω—Å–æ—Ä @${cleanUsername} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.`);
            } else {
                console.error('Error adding sponsor:', error);
                this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞.');
            }
        }
    }

    async removeSponsor(msg, sponsorUsername) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try {
            const chatMember = await this.bot.getChatMember(chatId, userId);
            if (!['administrator', 'creator'].includes(chatMember.status)) {
                this.bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏.');
                return;
            }
        } catch (error) {
            console.error('Error checking admin rights:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤.');
            return;
        }

        const cleanUsername = sponsorUsername.replace('@', '');
        
        try {
            const result = await pool.query(
                'DELETE FROM chat_sponsors WHERE chat_id = $1 AND sponsor_username = $2',
                [chatId, cleanUsername]
            );
            
            if (result.rowCount > 0) {
                this.bot.sendMessage(chatId, `‚úÖ –°–ø–æ–Ω—Å–æ—Ä @${cleanUsername} —É–¥–∞–ª–µ–Ω!`);
            } else {
                this.bot.sendMessage(chatId, `‚ö†Ô∏è –°–ø–æ–Ω—Å–æ—Ä @${cleanUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            }
        } catch (error) {
            console.error('Error removing sponsor:', error);
            this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–æ–Ω—Å–æ—Ä–∞.');
        }
    }

    async listSponsors(msg) {
        const chatId = msg.chat.id;
        
        const sponsors = await this.getChatSponsors(chatId);
        
        if (sponsors.length === 0) {
            this.bot.sendMessage(chatId, 'üìã –°–ø–æ–Ω—Å–æ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.');
            return;
        }
        
        let message = 'üìã –°–ø–∏—Å–æ–∫ —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:\n\n';
        sponsors.forEach((sponsor, index) => {
            message += `${index + 1}. @${sponsor.sponsor_username}\n`;
        });
        
        this.bot.sendMessage(chatId, message);
    }
}

module.exports = ChatHandler;
