const { Pool } = require('pg');

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

class PaymentHandler {
    constructor(bot) {
        this.bot = bot;
        this.setupHandlers();
    }

    setupHandlers() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
        this.bot.on('callback_query', async (callbackQuery) => {
            const action = callbackQuery.data;
            
            if (action.startsWith('buy_')) {
                const stars = parseInt(action.split('_')[1]);
                await this.handleStarPurchase(callbackQuery, stars);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        this.bot.on('pre_checkout_query', async (query) => {
            // –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
            this.bot.answerPreCheckoutQuery(query.id, true);
        });

        this.bot.on('successful_payment', async (msg) => {
            await this.handleSuccessfulPayment(msg);
        });
    }

    async handleStarPurchase(callbackQuery, stars) {
        const chatId = callbackQuery.message.chat.id;
        const userId = callbackQuery.from.id;
        const coins = stars * 10; // –∫—É—Ä—Å 1‚≠ê = 10 –∫–æ–∏–Ω–æ–≤

        try {
            await this.bot.sendInvoice(
                chatId,
                `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${coins} –∫–æ–∏–Ω–æ–≤`,
                `–ü–æ–∫—É–ø–∫–∞ ${coins} Tick –∫–æ–∏–Ω–æ–≤ –∑–∞ ${stars} ‚≠ê`,
                `stars_${userId}_${stars}_${Date.now()}`, // payload
                '', // provider_token –ø—É—Å—Ç–æ–π –¥–ª—è Stars
                'XTR', // –≤–∞–ª—é—Ç–∞
                [
                    { label: `${coins} Tick –∫–æ–∏–Ω–æ–≤`, amount: stars * 1000 } // ‚úÖ 1‚≠ê = 1000
                ]
            );

        } catch (error) {
            console.error('Error creating invoice:', error);
            this.bot.answerCallbackQuery(callbackQuery.id, { 
                text: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', 
                show_alert: true 
            });
        }
    }

    async handleSuccessfulPayment(msg) {
        const payment = msg.successful_payment;
        const userId = msg.from.id;
        
        try {
            // –ü–∞—Ä—Å–∏–º payload –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
            const payloadParts = payment.invoice_payload.split('_');
            
            if (payloadParts[0] === 'stars') {
                const paidUserId = parseInt(payloadParts[1]);
                const stars = parseInt(payloadParts[2]);
                const coins = stars * 10;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (paidUserId !== userId) {
                    console.error('Payment user mismatch');
                    return;
                }
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –∫–æ–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await pool.query(
                    'UPDATE users SET balance = balance + $1 WHERE id = $2',
                    [coins, userId]
                );
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await pool.query(
                    'INSERT INTO transactions (user_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                    [userId, coins, 'deposit', `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars: ${stars} ‚≠ê`]
                );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                const confirmMessage = `‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
                                     `üí∞ –ó–∞—á–∏—Å–ª–µ–Ω–æ: ${coins} –∫–æ–∏–Ω–æ–≤\n` +
                                     `‚≠ê –û–ø–ª–∞—á–µ–Ω–æ: ${stars} Telegram Stars\n\n` +
                                     `–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ! üéâ`;
                
                this.bot.sendMessage(msg.chat.id, confirmMessage);
                
                console.log(`Payment processed: ${userId} paid ${stars} stars for ${coins} coins`);
                
            } else {
                console.error('Unknown payment payload:', payment.invoice_payload);
            }
            
        } catch (error) {
            console.error('Error processing successful payment:', error);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            const errorMessage = `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n` +
                               `–ü–ª–∞—Ç–µ–∂ ID: ${payment.telegram_payment_charge_id}\n\n` +
                               `–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.`;
            
            this.bot.sendMessage(msg.chat.id, errorMessage);
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    async getBalance(userId) {
        try {
            const result = await pool.query('SELECT balance FROM users WHERE id = $1', [userId]);
            return result.rows[0]?.balance || 0;
        } catch (error) {
            console.error('Error getting balance:', error);
            return 0;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async getTransactionHistory(userId, limit = 10) {
        try {
            const result = await pool.query(
                'SELECT * FROM transactions WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2',
                [userId, limit]
            );
            return result.rows;
        } catch (error) {
            console.error('Error getting transaction history:', error);
            return [];
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–∏—è
    async canDeduct(userId, amount) {
        const balance = await this.getBalance(userId);
        return balance >= amount;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    async deductFunds(userId, amount, type, description) {
        try {
            const result = await pool.query(
                'UPDATE users SET balance = balance - $1 WHERE id = $2 AND balance >= $1 RETURNING balance',
                [amount, userId]
            );
            
            if (result.rows.length === 0) {
                throw new Error('Insufficient funds');
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await pool.query(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                [userId, -amount, type, description]
            );
            
            return result.rows[0].balance;
        } catch (error) {
            console.error('Error deducting funds:', error);
            throw error;
        }
    }
}

module.exports = PaymentHandler;
