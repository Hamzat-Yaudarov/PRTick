require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { Pool } = require('pg');
const express = require('express');
const ChatHandler = require('./chat-handler');
const PaymentHandler = require('./payment-handler');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
const chatHandler = new ChatHandler(bot);
const paymentHandler = new PaymentHandler(bot);

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
const app = express();
const PORT = process.env.PORT || 3000;

app.use(express.json());

app.get('/', (req, res) => {
    res.json({ 
        status: 'running',
        bot: 'Tick Bot',
        version: '1.0.0',
        timestamp: new Date().toISOString()
    });
});

app.get('/health', (req, res) => {
    res.json({ status: 'healthy' });
});

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const REFERRAL_BONUS = 50;
const MIN_TASK_REWARD = 15;
const MAX_TASK_REWARD = 50;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const db = {
    async getUser(userId) {
        const result = await pool.query('SELECT * FROM users WHERE id = $1', [userId]);
        return result.rows[0];
    },

    async createUser(userId, username, firstName, referredBy = null) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            const result = await client.query(
                'INSERT INTO users (id, username, first_name, referred_by) VALUES ($1, $2, $3, $4) RETURNING *',
                [userId, username, firstName, referredBy]
            );
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if (referredBy) {
                await client.query(
                    'UPDATE users SET balance = balance + $1, referral_count = referral_count + 1 WHERE id = $2',
                    [REFERRAL_BONUS, referredBy]
                );
                await client.query(
                    'INSERT INTO transactions (user_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                    [referredBy, REFERRAL_BONUS, 'referral_bonus', `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username || userId}`]
                );
            }
            
            await client.query('COMMIT');
            return result.rows[0];
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    },

    async updateBalance(userId, amount, type, description) {
        await pool.query('UPDATE users SET balance = balance + $1 WHERE id = $2', [amount, userId]);
        await pool.query(
            'INSERT INTO transactions (user_id, amount, type, description) VALUES ($1, $2, $3, $4)',
            [userId, amount, type, description]
        );
    },

    async getActiveTasks(excludeUserId = null, limit = 10) {
        let query = 'SELECT t.*, u.username as owner_username FROM tasks t JOIN users u ON t.owner_id = u.id WHERE t.is_active = true AND t.total_budget > t.completed_count * t.reward';
        let params = [];
        
        if (excludeUserId) {
            query += ' AND t.owner_id != $1';
            params.push(excludeUserId);
        }
        
        query += ' ORDER BY t.created_at DESC LIMIT $' + (params.length + 1);
        params.push(limit);
        
        const result = await pool.query(query, params);
        return result.rows;
    },

    async createTask(ownerId, channelUsername, reward, totalBudget) {
        const result = await pool.query(
            'INSERT INTO tasks (owner_id, channel_username, reward, total_budget) VALUES ($1, $2, $3, $4) RETURNING *',
            [ownerId, channelUsername, reward, totalBudget]
        );
        return result.rows[0];
    },

    async completeTask(taskId, userId) {
        const client = await pool.connect();
        try {
            await client.query('BEGIN');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ –∑–∞–¥–∞–Ω–∏–µ
            const existingCompletion = await client.query(
                'SELECT id FROM task_completions WHERE task_id = $1 AND user_id = $2',
                [taskId, userId]
            );
            
            if (existingCompletion.rows.length > 0) {
                throw new Error('–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            const taskResult = await client.query('SELECT * FROM tasks WHERE id = $1', [taskId]);
            const task = taskResult.rows[0];
            
            if (!task || !task.is_active) {
                throw new Error('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ');
            }
            
            if (task.total_budget < (task.completed_count + 1) * task.reward) {
                throw new Error('–ë—é–¥–∂–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω');
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            await client.query(
                'INSERT INTO task_completions (task_id, user_id) VALUES ($1, $2)',
                [taskId, userId]
            );
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
            await client.query(
                'UPDATE tasks SET completed_count = completed_count + 1 WHERE id = $1',
                [taskId]
            );
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            await client.query(
                'UPDATE users SET balance = balance + $1 WHERE id = $2',
                [task.reward, userId]
            );
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            await client.query(
                'INSERT INTO transactions (user_id, amount, type, description) VALUES ($1, $2, $3, $4)',
                [userId, task.reward, 'task_reward', `–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è: @${task.channel_username}`]
            );
            
            await client.query('COMMIT');
            return task;
        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }
    },

    async getUserTasks(userId) {
        const result = await pool.query('SELECT * FROM tasks WHERE owner_id = $1 ORDER BY created_at DESC', [userId]);
        return result.rows;
    },

    async isTaskCompleted(taskId, userId) {
        const result = await pool.query(
            'SELECT id FROM task_completions WHERE task_id = $1 AND user_id = $2',
            [taskId, userId]
        );
        return result.rows.length > 0;
    }
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å' }, { text: 'üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å' }],
            [{ text: 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç' }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const cabinetKeyboard = {
    reply_markup: {
        inline_keyboard: [
            [{ text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: 'deposit' }],
            [{ text: 'üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data: 'referral' }],
            [{ text: 'üìã –ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'my_tasks' }],
            [{ text: 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', callback_data: 'transactions' }]
        ]
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (msg.chat.type !== 'private') {
        return;
    }
    
    try {
        let user = await db.getUser(userId);
        
        if (!user) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            const referralCode = match[1] ? match[1].trim() : null;
            let referredBy = null;
            
            if (referralCode && referralCode.startsWith('_')) {
                referredBy = parseInt(referralCode.substring(1));
                if (referredBy === userId) {
                    referredBy = null; // –ù–µ–ª—å–∑—è —Ä–µ—Ñ–µ—Ä–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è
                }
            }
            
            user = await db.createUser(userId, username, firstName, referredBy);
            
            let welcomeMessage = `üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tick Bot!\n\n`;
            welcomeMessage += `üí∞ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ Tick –∫–æ–∏–Ω—ã, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n`;
            welcomeMessage += `üì¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤\n`;
            welcomeMessage += `üë• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n\n`;
            
            if (referredBy) {
                welcomeMessage += `üéÅ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –í–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏–ª ${REFERRAL_BONUS} –∫–æ–∏–Ω–æ–≤.\n\n`;
            }
            
            welcomeMessage += `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:`;
            
            bot.sendMessage(chatId, welcomeMessage, mainKeyboard);
        } else {
            bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${firstName}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`, mainKeyboard);
        }
    } catch (error) {
        console.error('Error in /start:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/') && msg.chat.type === 'private') {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        
        try {
            const user = await db.getUser(userId);
            if (!user) {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
                return;
            }
            
            switch (msg.text) {
                case 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å':
                    await handleEarnCommand(chatId, userId);
                    break;
                    
                case 'üì¢ –†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å':
                    await handleAdvertiseCommand(chatId, userId);
                    break;
                    
                case 'üë§ –ú–æ–π –∫–∞–±–∏–Ω–µ—Ç':
                    await handleCabinetCommand(chatId, user);
                    break;
                    
                default:
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏ –∑–∞–¥–∞–Ω–∏—è
                    if (msg.text.startsWith('—Å–æ–∑–¥–∞—Ç—å ')) {
                        await handleCreateTask(msg);
                    } else {
                        bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', mainKeyboard);
                    }
            }
        } catch (error) {
            console.error('Error handling message:', error);
            bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async function handleEarnCommand(chatId, userId) {
    const tasks = await db.getActiveTasks(userId, 5);
    
    if (tasks.length === 0) {
        bot.sendMessage(chatId, 'üòî –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!');
        return;
    }
    
    let message = 'üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:\n\n';
    const keyboard = [];
    
    for (let i = 0; i < tasks.length; i++) {
        const task = tasks[i];
        const isCompleted = await db.isTaskCompleted(task.id, userId);
        
        message += `${i + 1}. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ @${task.channel_username}\n`;
        message += `üíé –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} –∫–æ–∏–Ω–æ–≤\n`;
        message += `üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${task.completed_count}/${Math.floor(task.total_budget / task.reward)}\n`;
        
        if (isCompleted) {
            message += `‚úÖ –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ\n\n`;
        } else {
            message += `üîó –°–æ–∑–¥–∞–Ω–æ: @${task.owner_username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
            keyboard.push([{
                text: `–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ${i + 1}`,
                callback_data: `complete_task_${task.id}`
            }]);
        }
    }
    
    keyboard.push([{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_tasks' }]);
    
    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

async function handleAdvertiseCommand(chatId, userId) {
    const user = await db.getUser(userId);
    
    let message = 'üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞\n\n';
    message += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∫–æ–∏–Ω–æ–≤\n\n`;
    message += `üìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`;
    message += `<code>—Å–æ–∑–¥–∞—Ç—å @–∫–∞–Ω–∞–ª –Ω–∞–≥—Ä–∞–¥–∞ –±—é–¥–∂–µ—Ç</code>\n\n`;
    message += `üìã –ü—Ä–∏–º–µ—Ä:\n`;
    message += `<code>—Å–æ–∑–¥–∞—Ç—å @example_channel 25 500</code>\n\n`;
    message += `‚öñÔ∏è –ü—Ä–∞–≤–∏–ª–∞:\n`;
    message += `‚Ä¢ –ù–∞–≥—Ä–∞–¥–∞: –æ—Ç ${MIN_TASK_REWARD} –¥–æ ${MAX_TASK_REWARD} –∫–æ–∏–Ω–æ–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É\n`;
    message += `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: ${MIN_TASK_REWARD} –∫–æ–∏–Ω–æ–≤\n`;
    message += `‚Ä¢ –ë—é–¥–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n`;
    message += `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π = –±—é–¥–∂–µ—Ç √∑ –Ω–∞–≥—Ä–∞–¥–∞`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
}

async function handleCabinetCommand(chatId, user) {
    const referralLink = `https://t.me/tickpiarrobot?start=_${user.id}`;
    
    let message = `üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n\n`;
    message += `üÜî –í–∞—à ID: <code>${user.id}</code>\n`;
    message += `üí∞ –ë–∞–ª–∞–Ω—Å: <b>${user.balance}</b> –∫–æ–∏–Ω–æ–≤\n`;
    message += `üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${user.referral_count}</b>\n`;
    message += `üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString('ru-RU')}\n\n`;
    message += `üí° –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${user.referral_count * REFERRAL_BONUS}</b> –∫–æ–∏–Ω–æ–≤`;
    
    bot.sendMessage(chatId, message, { 
        parse_mode: 'HTML',
        ...cabinetKeyboard 
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const action = callbackQuery.data;
    const msg = callbackQuery.message;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;
    
    try {
        if (action.startsWith('complete_task_')) {
            const taskId = parseInt(action.split('_')[2]);
            await handleTaskCompletion(chatId, userId, taskId);
        } else if (action === 'refresh_tasks') {
            await handleEarnCommand(chatId, userId);
        } else if (action === 'referral') {
            await handleReferralSystem(chatId, userId);
        } else if (action === 'my_tasks') {
            await handleMyTasks(chatId, userId);
        } else if (action === 'transactions') {
            await handleTransactions(chatId, userId);
        } else if (action === 'deposit') {
            await handleDeposit(chatId, userId);
        }
        
        bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        console.error('Error handling callback:', error);
        bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
});

async function handleTaskCompletion(chatId, userId, taskId) {
    try {
        const task = await db.completeTask(taskId, userId);
        
        const message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n` +
                       `üì∫ –ö–∞–Ω–∞–ª: @${task.channel_username}\n` +
                       `üíé –ü–æ–ª—É—á–µ–Ω–æ: ${task.reward} –∫–æ–∏–Ω–æ–≤\n\n` +
                       `üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`;
        
        bot.sendMessage(chatId, message);
    } catch (error) {
        let errorMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.';
        if (error.message === '–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ') {
            errorMessage = '‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ!';
        } else if (error.message === '–ë—é–¥–∂–µ—Ç –∑–∞–¥–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω') {
            errorMessage = 'üòû –ë—é–¥–∂–µ—Ç —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–Ω!';
        }
        
        bot.sendMessage(chatId, errorMessage);
    }
}

async function handleReferralSystem(chatId, userId) {
    const user = await db.getUser(userId);
    const referralLink = `https://t.me/tickpiarrobot?start=_${user.id}`;
    
    let message = `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n\n`;
    message += `üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n`;
    message += `<code>${referralLink}</code>\n\n`;
    message += `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
    message += `‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>${user.referral_count}</b>\n`;
    message += `‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${user.referral_count * REFERRAL_BONUS}</b> –∫–æ–∏–Ω–æ–≤\n\n`;
    message += `üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n`;
    message += `‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏\n`;
    message += `‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞–µ—Ç–µ <b>${REFERRAL_BONUS} –∫–æ–∏–Ω–æ–≤</b>\n`;
    message += `‚Ä¢ –í–∞—à–∏ –¥—Ä—É–∑—å—è —Ç–æ–∂–µ —Å–º–æ–≥—É—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!`;
    
    bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
}

async function handleMyTasks(chatId, userId) {
    const tasks = await db.getUserTasks(userId);
    
    if (tasks.length === 0) {
        bot.sendMessage(chatId, 'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª "–†–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π.');
        return;
    }
    
    let message = 'üìã –í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n';
    
    tasks.forEach((task, index) => {
        const maxCompletions = Math.floor(task.total_budget / task.reward);
        const status = task.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–Ω–æ' : 'üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–æ';
        const progress = `${task.completed_count}/${maxCompletions}`;
        
        message += `${index + 1}. @${task.channel_username}\n`;
        message += `${status} | üíé ${task.reward} –∫–æ–∏–Ω–æ–≤\n`;
        message += `üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${progress}\n`;
        message += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${task.completed_count * task.reward}/${task.total_budget}\n`;
        message += `üìÖ ${new Date(task.created_at).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    bot.sendMessage(chatId, message);
}

async function handleTransactions(chatId, userId) {
    const transactions = await paymentHandler.getTransactionHistory(userId, 10);
    
    if (transactions.length === 0) {
        bot.sendMessage(chatId, 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞.');
        return;
    }
    
    let message = 'üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n';
    
    transactions.forEach((tx, index) => {
        const date = new Date(tx.created_at).toLocaleDateString('ru-RU');
        const time = new Date(tx.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        const amount = tx.amount > 0 ? `+${tx.amount}` : tx.amount;
        const emoji = tx.amount > 0 ? 'üíö' : 'üî¥';
        
        message += `${emoji} ${amount} –∫–æ–∏–Ω–æ–≤\n`;
        message += `üìù ${tx.description}\n`;
        message += `üìÖ ${date} ${time}\n\n`;
    });
    
    bot.sendMessage(chatId, message);
}

async function handleDeposit(chatId, userId) {
    let message = `üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars\n\n`;
    message += `‚≠ê –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 Star = 10 –∫–æ–∏–Ω–æ–≤\n\n`;
    message += `–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:`;
    
    const packages = [
        { stars: 10, coins: 100 },
        { stars: 25, coins: 250 },
        { stars: 50, coins: 500 },
        { stars: 100, coins: 1000 },
        { stars: 250, coins: 2500 }
    ];
    
    const keyboard = packages.map(pkg => [{
        text: `${pkg.stars} ‚≠ê ‚Üí ${pkg.coins} –∫–æ–∏–Ω–æ–≤`,
        callback_data: `buy_${pkg.stars}`
    }]);
    
    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: keyboard
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
async function handleCreateTask(msg) {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
        const parts = msg.text.split(' ');
        if (parts.length !== 4) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Å–æ–∑–¥–∞—Ç—å @–∫–∞–Ω–∞–ª –Ω–∞–≥—Ä–∞–¥–∞ –±—é–¥–∂–µ—Ç</code>', { parse_mode: 'HTML' });
            return;
        }
        
        const channel = parts[1].replace('@', '');
        const reward = parseInt(parts[2]);
        const budget = parseInt(parts[3]);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (isNaN(reward) || isNaN(budget)) {
            bot.sendMessage(chatId, '‚ùå –ù–∞–≥—Ä–∞–¥–∞ –∏ –±—é–¥–∂–µ—Ç –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!');
            return;
        }
        
        if (reward < MIN_TASK_REWARD || reward > MAX_TASK_REWARD) {
            bot.sendMessage(chatId, `‚ùå –ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç ${MIN_TASK_REWARD} –¥–æ ${MAX_TASK_REWARD} –∫–æ–∏–Ω–æ–≤!`);
            return;
        }
        
        if (budget < reward) {
            bot.sendMessage(chatId, '‚ùå –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–≥—Ä–∞–¥—ã!');
            return;
        }
        
        const user = await db.getUser(userId);
        if (user.balance < budget) {
            bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} –∫–æ–∏–Ω–æ–≤\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${budget} –∫–æ–∏–Ω–æ–≤`);
            return;
        }
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –±—é–¥–∂–µ—Ç
        await db.updateBalance(userId, -budget, 'task_payment', `–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è @${channel}`);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        const task = await db.createTask(userId, channel, reward, budget);
        
        const maxCompletions = Math.floor(budget / reward);
        let message = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n`;
        message += `üì∫ –ö–∞–Ω–∞–ª: @${channel}\n`;
        message += `üíé –ù–∞–≥—Ä–∞–¥–∞: ${reward} –∫–æ–∏–Ω–æ–≤ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É\n`;
        message += `üí∞ –ë—é–¥–∂–µ—Ç: ${budget} –∫–æ–∏–Ω–æ–≤\n`;
        message += `üë• –ú–∞–∫—Å–∏–º—É–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π: ${maxCompletions}\n\n`;
        message += `üöÄ –ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ä–∞–∑–¥–µ–ª–µ "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å".`;
        
        bot.sendMessage(chatId, message);
        
    } catch (error) {
        console.error('Error creating task:', error);
        bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initDatabase() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏ —Å–æ–∑–¥–∞–µ–º –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        await createTablesIfNotExist();

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
        process.exit(1);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function createTablesIfNotExist() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        const tableCheck = await pool.query(`
            SELECT EXISTS (
                SELECT FROM information_schema.tables
                WHERE table_schema = 'public'
                AND table_name = 'users'
            );
        `);

        if (!tableCheck.rows[0].exists) {
            console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

            // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
            await pool.query(`
                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                CREATE TABLE IF NOT EXISTS users (
                    id BIGINT PRIMARY KEY,
                    username VARCHAR(255),
                    first_name VARCHAR(255),
                    balance INTEGER DEFAULT 0,
                    referral_count INTEGER DEFAULT 0,
                    referred_by BIGINT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                );

                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–¥–∞–Ω–∏–π
                CREATE TABLE IF NOT EXISTS tasks (
                    id SERIAL PRIMARY KEY,
                    owner_id BIGINT NOT NULL,
                    channel_username VARCHAR(255) NOT NULL,
                    reward INTEGER NOT NULL CHECK (reward >= 15 AND reward <= 50),
                    total_budget INTEGER NOT NULL,
                    completed_count INTEGER DEFAULT 0,
                    is_active BOOLEAN DEFAULT true,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (owner_id) REFERENCES users(id)
                );

                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
                CREATE TABLE IF NOT EXISTS task_completions (
                    id SERIAL PRIMARY KEY,
                    task_id INTEGER NOT NULL,
                    user_id BIGINT NOT NULL,
                    completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (task_id) REFERENCES tasks(id),
                    FOREIGN KEY (user_id) REFERENCES users(id),
                    UNIQUE(task_id, user_id)
                );

                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–æ–≤ —Å —Å–ø–æ–Ω—Å–æ—Ä–∞–º–∏
                CREATE TABLE IF NOT EXISTS chats (
                    id BIGINT PRIMARY KEY,
                    owner_id BIGINT NOT NULL,
                    chat_type VARCHAR(50) NOT NULL,
                    title VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (owner_id) REFERENCES users(id)
                );

                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ –¥–ª—è —á–∞—Ç–æ–≤
                CREATE TABLE IF NOT EXISTS chat_sponsors (
                    id SERIAL PRIMARY KEY,
                    chat_id BIGINT NOT NULL,
                    sponsor_username VARCHAR(255) NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (chat_id) REFERENCES chats(id),
                    UNIQUE(chat_id, sponsor_username)
                );

                -- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                CREATE TABLE IF NOT EXISTS transactions (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT NOT NULL,
                    amount INTEGER NOT NULL,
                    type VARCHAR(50) NOT NULL,
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id)
                );

                -- –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                CREATE INDEX IF NOT EXISTS idx_users_id ON users(id);
                CREATE INDEX IF NOT EXISTS idx_tasks_owner_id ON tasks(owner_id);
                CREATE INDEX IF NOT EXISTS idx_tasks_active ON tasks(is_active);
                CREATE INDEX IF NOT EXISTS idx_task_completions_user_task ON task_completions(user_id, task_id);
                CREATE INDEX IF NOT EXISTS idx_chats_owner_id ON chats(owner_id);
                CREATE INDEX IF NOT EXISTS idx_chat_sponsors_chat_id ON chat_sponsors(chat_id);
                CREATE INDEX IF NOT EXISTS idx_transactions_user_id ON transactions(user_id);
            `);

            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå Polling error:', error);
});

process.on('uncaughtException', (error) => {
    console.error('‚ùå Uncaught Exception:', error);
});

process.on('unhandledRejection', (error) => {
    console.error('‚ùå Unhandled Rejection:', error);
});

// –ó–∞–ø—É—Å–∫
async function start() {
    await initDatabase();
    console.log('üöÄ Tick Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    console.log(`üåê –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: @tickpiarrobot`);
}

start().catch(console.error);
